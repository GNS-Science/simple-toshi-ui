schema {
  query: QueryRoot
  mutation: MutationRoot
}

input AppendInversionSolutionTablesInput {
  id: ID
  tables: [LabelledTableRelationInput]!
  clientMutationId: String
}

"""Append LabelledTableRelationTable to an existing Inversion Solution"""
type AppendInversionSolutionTablesPayload {
  inversion_solution: InversionSolution
  ok: Boolean
  clientMutationId: String
}

"""An AutomationTask in the NSHM process"""
type AutomationTask implements Node & Thing & AutomationTaskInterface {
  """The ID of the object."""
  id: ID!

  """The time the event was created"""
  created: DateTime

  """Files associated with this object."""
  files(before: String, after: String, first: Int, last: Int): FileRelationConnection

  """parent task(s) of this task"""
  parents(before: String, after: String, first: Int, last: Int): TaskTaskRelationConnection

  """Children of this thing"""
  children(before: String, after: String, first: Int, last: Int): TaskTaskRelationConnection
  result: EventResult
  state: EventState

  """the final duration of the event in seconds"""
  duration: Float

  """
  input arguments for the rupture generation task, as a list of Key Value pairs.
  """
  arguments: [KeyValuePair]

  """execution environment details, as a list of Key Value pairs."""
  environment: [KeyValuePair]

  """result metrics from the task, as a list of Key Value pairs."""
  metrics: [KeyValuePair]
  model_type: ModelType
  task_type: TaskSubType

  """the primary result of this task (only for task_type == INVERSION."""
  inversion_solution: InversionSolution
}

input AutomationTaskInput {
  result: EventResult!
  state: EventState!

  """The time the task was created"""
  created: DateTime!

  """The final duraton of the task in seconds"""
  duration: Float

  """
  input arguments for the rupture generation task, as a list of Key Value pairs.
  """
  arguments: [KeyValuePairInput]

  """execution environment details, as a list of Key Value pairs."""
  environment: [KeyValuePairInput]

  """result metrics from the task, as a list of Key Value pairs."""
  metrics: [KeyValuePairInput]
}

"""An AutomationTask in the NSHM process"""
interface AutomationTaskInterface {
  result: EventResult
  state: EventState

  """The time the event was created"""
  created: DateTime

  """the final duration of the event in seconds"""
  duration: Float

  """parent task(s) of this task"""
  parents(before: String, after: String, first: Int, last: Int): TaskTaskRelationConnection

  """
  input arguments for the rupture generation task, as a list of Key Value pairs.
  """
  arguments: [KeyValuePair]

  """execution environment details, as a list of Key Value pairs."""
  environment: [KeyValuePair]

  """result metrics from the task, as a list of Key Value pairs."""
  metrics: [KeyValuePair]
}

input AutomationTaskUpdateInput {
  task_id: ID!
  result: EventResult
  state: EventState

  """The final duraton of the task in seconds"""
  duration: Float

  """
  input arguments for the rupture generation task, as a list of Key Value pairs.
  """
  arguments: [KeyValuePairInput]

  """execution environment details, as a list of Key Value pairs."""
  environment: [KeyValuePairInput]

  """result metrics from the task, as a list of Key Value pairs."""
  metrics: [KeyValuePairInput]
}

union ChildTaskUnion = GeneralTask | RuptureGenerationTask | AutomationTask

type CreateAutomationTask {
  task_result: AutomationTask
}

type CreateFile {
  ok: Boolean
  file_result: File
}

type CreateFileRelation {
  ok: Boolean
  file_relation: FileRelation
}

input CreateGeneralTaskInput {
  """notes about the task, potentially Markdown"""
  notes: String

  """count of subtasks"""
  subtask_count: Int
  subtask_type: TaskSubType
  model_type: ModelType
  subtask_result: EventResult

  """When the taskrecord was created"""
  created: DateTime

  """The name of the person or process responsible for the task"""
  agent_name: String

  """A title always helps"""
  title: String

  """Some description of the task, potentially Markdown"""
  description: String

  """subtask arguments, as a list of Key Value List pairs."""
  argument_lists: [KeyValueListPairInput]

  """arbitrary metadata for the task, as a list of Key Value pairs."""
  meta: [KeyValuePairInput]
  clientMutationId: String
}

type CreateGeneralTaskPayload {
  general_task: GeneralTask
  clientMutationId: String
}

input CreateInversionSolutionInput {
  """The name of the file"""
  file_name: String

  """The base64-encoded md5 digest of the file"""
  md5_digest: String

  """The size of the file in bytes"""
  file_size: Int

  """additional file meta data, as a list of Key Value pairs."""
  meta: [KeyValuePairInput]

  """When the task record was created"""
  created: DateTime

  """deprecated"""
  produced_by_id: ID

  """deprecated"""
  mfd_table_id: ID
  hazard_table_id: ID
  tables: [LabelledTableRelationInput]

  """result metrics from the solution, as a list of Key Value pairs."""
  metrics: [KeyValuePairInput]
  clientMutationId: String
}

"""Create an Inversion Solution file"""
type CreateInversionSolutionPayload {
  inversion_solution: InversionSolution
  ok: Boolean
  clientMutationId: String
}

type CreateRuptureGenerationTask {
  task_result: RuptureGenerationTask
}

type CreateSmsFile {
  ok: Boolean
  file_result: SmsFile
}

input CreateStrongMotionStationInput {
  """When the SMS record was created"""
  created: DateTime

  """When SMS record was updated"""
  updated: DateTime

  """A unique, four character SMS identifier"""
  site_code: String

  """The NZS1170.5 Site Class"""
  site_class: SmsSiteClass

  """The data source used for site classification"""
  site_class_basis: SmsSiteClassBasis

  """Array of Vs30 mean measurements"""
  Vs30_mean: [Float]

  """Array of Vs30 mean measurements"""
  Vs30_std_dev: [Float]

  """Indicate whether subsurface investigations have encountered bedrock"""
  bedrock_encountered: Boolean

  """Indicate presence of soils that can liquify"""
  liquefiable: Boolean

  """Indicate presence of soft clay or peat soils"""
  soft_clay_or_peat: Boolean
  clientMutationId: String
}

type CreateStrongMotionStationPayload {
  strong_motion_station: StrongMotionStation
  clientMutationId: String
}

input CreateTableInput {
  """a name for the table"""
  name: String

  """ID of the object this data relates to"""
  object_id: ID

  """When the task record was created"""
  created: DateTime

  """column headings"""
  column_headers: [String]

  """column types"""
  column_types: [RowItemType]

  """
  The table rows. Each row is a list of strings that can be coerced according to column_types.
  """
  rows: [[String]]

  """additional meta data, as a list of Key Value pairs."""
  meta: [KeyValuePairInput]
  table_type: TableType!

  """table dimensions, as a list of Key Value List pairs."""
  dimensions: [KeyValueListPairInput]
  clientMutationId: String
}

type CreateTablePayload {
  table: Table
  clientMutationId: String
}

type CreateTaskTaskRelation {
  ok: Boolean
  thing_relation: TaskTaskRelation
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

enum EventResult {
  FAILURE
  PARTIAL
  SUCCESS
  UNDEFINED
}

enum EventState {
  SCHEDULED
  STARTED
  DONE
  UNDEFINED
}

"""A data file"""
type File implements Node & FileInterface {
  """The ID of the object."""
  id: ID!

  """The name of the file"""
  file_name: String

  """The base64-encoded md5 digest of the file"""
  md5_digest: String

  """The size of the file in bytes"""
  file_size: Int

  """A pre-signed URL to download the file from s3"""
  file_url: String

  """A pre-signed URL to post the data to s3"""
  post_url: String

  """additional file meta data, as a list of Key Value pairs."""
  meta: [KeyValuePair]

  """things related to this data file"""
  relations(before: String, after: String, first: Int, last: Int): FileRelationConnection
}

"""A Relay connection for Files"""
type FileConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [FileEdge]!
  total_count: Int
}

"""A Relay edge containing a `File` and its cursor."""
type FileEdge {
  """The item at the end of the edge"""
  node: File

  """A cursor for use in pagination"""
  cursor: String!
}

"""A File in the NSHM saga"""
interface FileInterface {
  """The name of the file"""
  file_name: String

  """The base64-encoded md5 digest of the file"""
  md5_digest: String

  """The size of the file in bytes"""
  file_size: Int

  """A pre-signed URL to download the file from s3"""
  file_url: String

  """A pre-signed URL to post the data to s3"""
  post_url: String

  """additional file meta data, as a list of Key Value pairs."""
  meta: [KeyValuePair]

  """things related to this data file"""
  relations(before: String, after: String, first: Int, last: Int): FileRelationConnection
}

type FileRelation {
  thing: Thing
  file: FileUnion
  role: FileRole!
  thing_id: String
  file_id: String
}

type FileRelationConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [FileRelationEdge]!
  total_count: Int
}

"""A Relay edge containing a `FileRelation` and its cursor."""
type FileRelationEdge {
  """The item at the end of the edge"""
  node: FileRelation

  """A cursor for use in pagination"""
  cursor: String!
}

enum FileRole {
  READ
  WRITE
  READ_WRITE
  UNDEFINED
}

union FileUnion = SmsFile | File | InversionSolution

"""
A General Task capture metadata and related inputs/outputs for arbitrary tasks
that may not happen often enough to justify automation and/or a custom schema type.
"""
type GeneralTask implements Node & Thing {
  """The ID of the object."""
  id: ID!

  """When the task record was created"""
  created: DateTime

  """Files associated with this object."""
  files(before: String, after: String, first: Int, last: Int): FileRelationConnection

  """parent task(s) of this task"""
  parents(before: String, after: String, first: Int, last: Int): TaskTaskRelationConnection

  """sub-tasks of this task"""
  children(before: String, after: String, first: Int, last: Int): TaskTaskRelationConnection

  """When the task record was last updated"""
  updated: DateTime

  """The name of the person or process responsible for the task"""
  agent_name: String

  """A title always helps"""
  title: String

  """Some description of the task, potentially Markdown"""
  description: String

  """subtask arguments, as a list of Key Value List pairs."""
  argument_lists: [KeyValueListPair]

  """list of keys for items having >1 value in argument_lists"""
  swept_arguments: [String]

  """arbitrary metadata for the task, as a list of Key Value pairs."""
  meta: [KeyValuePair]

  """notes about the task, potentially Markdown"""
  notes: String

  """count of subtasks"""
  subtask_count: Int
  subtask_type: TaskSubType
  model_type: ModelType
  subtask_result: EventResult
}

"""Represents an Inversion Solution file"""
type InversionSolution implements Node & FileInterface {
  """The ID of the object."""
  id: ID!

  """The name of the file"""
  file_name: String

  """The base64-encoded md5 digest of the file"""
  md5_digest: String

  """The size of the file in bytes"""
  file_size: Int

  """A pre-signed URL to download the file from s3"""
  file_url: String

  """A pre-signed URL to post the data to s3"""
  post_url: String

  """additional file meta data, as a list of Key Value pairs."""
  meta: [KeyValuePair]

  """things related to this data file"""
  relations(before: String, after: String, first: Int, last: Int): FileRelationConnection

  """When the task record was created"""
  created: DateTime

  """result metrics from the task, as a list of Key Value pairs."""
  metrics: [KeyValuePair]

  """deprecated"""
  produced_by_id: ID

  """deprecated"""
  mfd_table_id: ID
  hazard_table_id: ID
  tables: [LabelledTableRelation]

  """deprecated"""
  hazard_table: Table

  """deprecated"""
  mfd_table: Table
  produced_by: RuptureGenerationTask
}

"""Simple container for KVL lists of strings"""
type KeyValueListPair {
  """key"""
  k: String

  """list of values"""
  v: [String]
}

"""Simple container for KVL lists of strings"""
input KeyValueListPairInput {
  """key"""
  k: String

  """list of values"""
  v: [String]
}

"""Simple container for string-based KV pair data"""
type KeyValuePair {
  """key"""
  k: String

  """value"""
  v: String
}

"""Simple container for string-based KV pair data"""
input KeyValuePairInput {
  """key"""
  k: String

  """value"""
  v: String
}

"""
a unique, labelled table relationship.

This is intended to be used as an internal structure within an InversionSolution (or similar).
It must be stored internally in the parent object, so does not implement the
node interface. New instances must be mutated via the
parent class.
"""
type LabelledTableRelation {
  """an internal unique UUID to support mutations."""
  identity: String

  """When the task record was created."""
  created: DateTime

  """the object responsible for creating this relationship."""
  produced_by_id: ID

  """Label used to differentiate this relationsip for humans."""
  label: String

  """the ID of the table"""
  table_id: ID
  table: Table

  """table type"""
  table_type: TableType

  """table dimensions, as a list of Key Value List pairs."""
  dimensions: [KeyValueListPair]
}

input LabelledTableRelationInput {
  """the object responsible for creating this relationship."""
  produced_by_id: ID

  """Label used to differentiate this relationsip for humans."""
  label: String

  """the ID of the table"""
  table_id: ID

  """table type"""
  table_type: TableType

  """table dimensions, as a list of Key Value List pairs."""
  dimensions: [KeyValueListPairInput]
}

enum ModelType {
  CRUSTAL
  SUBDUCTION
}

type MutationRoot {
  """Append LabelledTableRelationTable to an existing Inversion Solution"""
  append_inversion_solution_tables(input: AppendInversionSolutionTablesInput!): AppendInversionSolutionTablesPayload
  create_automation_task(input: NewAutomationTaskInput!): CreateAutomationTask
  create_file(
    file_name: String
    file_size: Int
    md5_digest: String = "The base64-encoded md5 digest of the file"

    """additional file meta data, as a list of Key Value pairs."""
    meta: [KeyValuePairInput]
  ): CreateFile
  create_file_relation(file_id: ID!, role: FileRole!, thing_id: ID!): CreateFileRelation
  create_general_task(input: CreateGeneralTaskInput!): CreateGeneralTaskPayload

  """Create an Inversion Solution file"""
  create_inversion_solution(input: CreateInversionSolutionInput!): CreateInversionSolutionPayload
  create_rupture_generation_task(input: AutomationTaskInput!): CreateRuptureGenerationTask
  create_sms_file(file_name: String, file_size: Int, file_type: SmsFileType!, md5_digest: String = "The base64-encoded md5 digest of the file"): CreateSmsFile
  create_strong_motion_station(input: CreateStrongMotionStationInput!): CreateStrongMotionStationPayload
  create_table(input: CreateTableInput!): CreateTablePayload
  create_task_relation(child_id: ID!, parent_id: ID!): CreateTaskTaskRelation
  update_automation_task(input: AutomationTaskUpdateInput!): UpdateAutomationTask
  update_general_task(input: UpdateGeneralTaskInput!): UpdateGeneralTaskPayload
  update_rupture_generation_task(input: AutomationTaskUpdateInput!): UpdateRuptureGenerationTask
}

input NewAutomationTaskInput {
  result: EventResult!
  state: EventState!

  """The time the task was created"""
  created: DateTime!

  """The final duraton of the task in seconds"""
  duration: Float

  """
  input arguments for the rupture generation task, as a list of Key Value pairs.
  """
  arguments: [KeyValuePairInput]

  """execution environment details, as a list of Key Value pairs."""
  environment: [KeyValuePairInput]

  """result metrics from the task, as a list of Key Value pairs."""
  metrics: [KeyValuePairInput]
  model_type: ModelType
  task_type: TaskSubType!
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

type NodeFilter {
  ok: Boolean
  result(before: String, after: String, first: Int, last: Int): SearchResultConnection
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""This is the entry point for all graphql query operations"""
type QueryRoot {
  """List Opensha Rupture Generation tasks."""
  rupture_generation_tasks(before: String, after: String, first: Int, last: Int): RuptureGenerationTaskConnection

  """The files."""
  files(before: String, after: String, first: Int, last: Int): FileConnection
  node(
    """The ID of the object"""
    id: ID!
  ): Node
  nodes(id_in: [ID]): NodeFilter
  search(search_term: String): Search
  strong_motion_station(id: ID!): StrongMotionStation

  """The list of strong motion stations"""
  strong_motion_stations(before: String, after: String, first: Int, last: Int): StrongMotionStationConnection
}

"""Data type"""
enum RowItemType {
  integer
  double
  string
  boolean
}

"""An RuptureGenerationTask in the NSHM process"""
type RuptureGenerationTask implements Node & Thing & AutomationTaskInterface {
  """The ID of the object."""
  id: ID!

  """The time the event was created"""
  created: DateTime

  """Files associated with this object."""
  files(before: String, after: String, first: Int, last: Int): FileRelationConnection

  """parent task(s) of this task"""
  parents(before: String, after: String, first: Int, last: Int): TaskTaskRelationConnection

  """Children of this thing"""
  children(before: String, after: String, first: Int, last: Int): TaskTaskRelationConnection
  result: EventResult
  state: EventState

  """the final duration of the event in seconds"""
  duration: Float

  """
  input arguments for the rupture generation task, as a list of Key Value pairs.
  """
  arguments: [KeyValuePair]

  """execution environment details, as a list of Key Value pairs."""
  environment: [KeyValuePair]

  """result metrics from the task, as a list of Key Value pairs."""
  metrics: [KeyValuePair]
}

"""A list of RuptureGenerationTask items"""
type RuptureGenerationTaskConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [RuptureGenerationTaskEdge]!
  total_count: Int
}

"""A Relay edge containing a `RuptureGenerationTask` and its cursor."""
type RuptureGenerationTaskEdge {
  """The item at the end of the edge"""
  node: RuptureGenerationTask

  """A cursor for use in pagination"""
  cursor: String!
}

type Search {
  ok: Boolean
  search_result(before: String, after: String, first: Int, last: Int): SearchResultConnection
}

union SearchResult = File | RuptureGenerationTask | StrongMotionStation | SmsFile | GeneralTask | Table | InversionSolution | AutomationTask

type SearchResultConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [SearchResultEdge]!
  total_count: Int
}

"""A Relay edge containing a `SearchResult` and its cursor."""
type SearchResultEdge {
  """The item at the end of the edge"""
  node: SearchResult

  """A cursor for use in pagination"""
  cursor: String!
}

type SmsFile implements Node & FileInterface {
  """The ID of the object."""
  id: ID!

  """The name of the file"""
  file_name: String

  """The base64-encoded md5 digest of the file"""
  md5_digest: String

  """The size of the file in bytes"""
  file_size: Int

  """A pre-signed URL to download the file from s3"""
  file_url: String

  """A pre-signed URL to post the data to s3"""
  post_url: String

  """additional file meta data, as a list of Key Value pairs."""
  meta: [KeyValuePair]

  """things related to this data file"""
  relations(before: String, after: String, first: Int, last: Int): FileRelationConnection
  file_type: SmsFileType!
}

enum SmsFileType {
  BH
  CPT
  DH
  HVSR
  SW
}

"""NZS1170.5 Site Class, one of A,B,C,D,E"""
enum SmsSiteClass {
  A
  B
  C
  D
  E
}

"""NZS1170.5 Site Class Basis, one of Vs,SPT,su"""
enum SmsSiteClassBasis {
  Vs
  SPT
  su
}

"""A Strong Motion Station """
type StrongMotionStation implements Node & Thing {
  """The ID of the object."""
  id: ID!

  """When the SMS record was created"""
  created: DateTime

  """Files associated with this object."""
  files(before: String, after: String, first: Int, last: Int): FileRelationConnection

  """Parents of this thing"""
  parents(before: String, after: String, first: Int, last: Int): TaskTaskRelationConnection

  """Children of this thing"""
  children(before: String, after: String, first: Int, last: Int): TaskTaskRelationConnection

  """When SMS record was updated"""
  updated: DateTime

  """A unique, four character SMS identifier"""
  site_code: String

  """The NZS1170.5 Site Class"""
  site_class: SmsSiteClass

  """The data source used for site classification"""
  site_class_basis: SmsSiteClassBasis

  """Array of Vs30 mean measurements"""
  Vs30_mean: [Float]

  """Array of Vs30 mean measurements"""
  Vs30_std_dev: [Float]

  """Indicate whether subsurface investigations have encountered bedrock"""
  bedrock_encountered: Boolean

  """Indicate presence of soils that can liquify"""
  liquefiable: Boolean

  """Indicate presence of soft clay or peat soils"""
  soft_clay_or_peat: Boolean
}

"""A list of StrongMotionStation items"""
type StrongMotionStationConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [StrongMotionStationEdge]!
}

"""A Relay edge containing a `StrongMotionStation` and its cursor."""
type StrongMotionStationEdge {
  """The item at the end of the edge"""
  node: StrongMotionStation

  """A cursor for use in pagination"""
  cursor: String!
}

"""CSV-list structure for floats Distribution"""
type Table implements Node {
  """The ID of the object."""
  id: ID!

  """a name for the table"""
  name: String

  """ID of the object this data relates to"""
  object_id: ID

  """When the task record was created"""
  created: DateTime

  """column headings"""
  column_headers: [String]

  """column types"""
  column_types: [RowItemType]

  """
  The table rows. Each row is a list of strings that can be coerced according to column_types.
  """
  rows: [[String]]

  """additional meta data, as a list of Key Value pairs."""
  meta: [KeyValuePair]

  """table type"""
  table_type: TableType

  """table dimensions, as a list of Key Value List pairs."""
  dimensions: [KeyValueListPair]
}

"""Data type"""
enum TableType {
  HAZARD_GRIDDED
  HAZARD_SITES
  MFD_CURVES
  MFD_CURVES_V2
  GENERAL
}

enum TaskSubType {
  RUPTURE_SET
  INVERSION
  HAZARD
  REPORT
}

type TaskTaskRelation {
  parent: GeneralTask
  child: ChildTaskUnion
  parent_id: String
  child_id: String
}

type TaskTaskRelationConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [TaskTaskRelationEdge]!
  total_count: Int
}

"""A Relay edge containing a `TaskTaskRelation` and its cursor."""
type TaskTaskRelationEdge {
  """The item at the end of the edge"""
  node: TaskTaskRelation

  """A cursor for use in pagination"""
  cursor: String!
}

"""A Thing in the NSHM saga"""
interface Thing {
  """When the thing was created"""
  created: DateTime

  """Files associated with this object."""
  files(before: String, after: String, first: Int, last: Int): FileRelationConnection

  """Parents of this thing"""
  parents(before: String, after: String, first: Int, last: Int): TaskTaskRelationConnection

  """Children of this thing"""
  children(before: String, after: String, first: Int, last: Int): TaskTaskRelationConnection
}

type UpdateAutomationTask {
  task_result: AutomationTask
}

input UpdateGeneralTaskInput {
  """When the task record was created"""
  created: DateTime

  """When the task record was last updated"""
  updated: DateTime

  """The name of the person or process responsible for the task"""
  agent_name: String

  """A title always helps"""
  title: String

  """Some description of the task, potentially Markdown"""
  description: String

  """notes about the task, potentially Markdown"""
  notes: String

  """count of subtasks"""
  subtask_count: Int
  subtask_type: TaskSubType
  model_type: ModelType
  subtask_result: EventResult
  task_id: ID!

  """subtask arguments, as a list of Key Value List pairs."""
  argument_lists: [KeyValueListPairInput]

  """arbitrary metadata for the task, as a list of Key Value pairs."""
  meta: [KeyValuePairInput]
  clientMutationId: String
}

type UpdateGeneralTaskPayload {
  general_task: GeneralTask
  ok: Boolean
  clientMutationId: String
}

type UpdateRuptureGenerationTask {
  task_result: RuptureGenerationTask
}

